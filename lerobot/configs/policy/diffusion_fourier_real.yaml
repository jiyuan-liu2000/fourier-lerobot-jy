# @package _global_

# Defaults for training for the PushT dataset as per https://github.com/real-stanford/diffusion_policy.
# Note: We do not track EMA model weights as we discovered it does not improve the results. See
#       https://github.com/huggingface/lerobot/pull/134 for more details.

seed: 100000
dataset_repo_id: pick_and_place_left_new
dataset_root: data

hydra:
  run:
    # Set `dir` to where you would like to save all of the run outputs. If you run another training session
    # with the same value for `dir` its contents will be overwritten unless you set `resume` to true.
    dir: outputs/train/${now:%Y-%m-%d}/${now:%H-%M-%S}_${env.name}_${policy.name}_${hydra.job.name}
  job:
    name: pick_and_place_left_new

override_dataset_stats:
  # TODO(rcadene, alexander-soare): should we remove image stats as well? do we use a pretrained vision model?
  observation.images.left:
    # stats from imagenet, since we use a pretrained vision model
    mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
    std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)
  observation.images.right:
    # stats from imagenet, since we use a pretrained vision model
    mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
    std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)

training:
  offline_steps: 500000
  online_steps: 0
  eval_freq: -1
  save_freq: 5000
  save_checkpoint: true

  batch_size: 64
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.images.left: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.images.right: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"

  # The original implementation doesn't sample frames for the last 7 steps,
  # which avoids excessive padding and leads to improved training results.
  drop_n_last_frames: 7  # ${policy.horizon} - ${policy.n_action_steps} - ${policy.n_obs_steps} + 1

  image_transforms:
    # The transform will be applied with the given probability, if weight is greater than 0. 
    # If weight is 0, the transform will be applied with probability 1.
    enable: true
    # This is the maximum number of transforms (sampled from these below) that will be applied to each frame.
    # It's an integer in the interval [1, number of available transforms].
    max_num_transforms: 999
    # By default, transforms are applied in Torchvision's suggested order (shown below).
    # Set this to True to apply them in a random order.
    random_order: false
    brightness:
      weight: 1
      min_max: [0.9, 1.1]
    contrast:
      weight: 1
      min_max: [0.9, 1.1]
    saturation:
      weight: 1
      min_max: [0.9, 1.1]
    hue:
      weight: 1
      min_max: [-0.05, 0.05]
    # Custom transforms
    custom_transforms:
      GaussianBlur:
        weight: 1
        args:
          kernel_size: [9, 9]
          sigma: [0.1, 1.0]
      # # Necessary for using Dino_v2 backbone
      # CenterCrop:
      #   weight: -1
      #   args:
      #     size: [224, 308]

eval:
  n_episodes: 5
  batch_size: 5

policy:
  name: diffusion

  # Input / output structure.
  n_obs_steps: 2
  horizon: 32
  n_action_steps: 4

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.left: [3, 240, 400]
    observation.images.right: [3, 240, 400]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.left: mean_std
    observation.images.right: mean_std
    observation.state: mean_std
  output_normalization_modes:
    action: mean_std

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: dino_v2
  crop_shape: [224, 308]
  crop_is_random: False
  pretrained_backbone_weights: null
  use_separate_rgb_encoder_per_camera: False
  use_group_norm: False
  spatial_softmax_num_keypoints: 32
  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDIM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: 10  # if not provided, defaults to `num_train_timesteps`

  # Loss computation
  do_mask_loss_for_padding: false

wandb:
  enable: true
  # Set to true to disable saving an artifact despite save_checkpoint == True
  disable_artifact: false
  project: lerobot
  notes: ""